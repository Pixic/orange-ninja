{"version":3,"sources":["components/product.jsx","components/counter.jsx","App.tsx","serviceWorker.js","index.tsx","logo.svg"],"names":["Product","props","state","productName","count","imageUrl","this","setState","className","src","alt","onClick","increase","bind","type","decrease","Component","Counter","text","totalCount","productNames","styles","fontSize","fontWeight","style","updateTotal","App","logo","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2QA0DeA,E,YAvDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,YAAa,GACbC,MAAO,EACPC,SAAU,6BALC,E,wEAUfC,KAAKC,SAAS,CAAEH,MAAOE,KAAKJ,MAAME,MAAQ,M,iCAK5B,IADEE,KAAKJ,MAAfE,OAEFE,KAAKC,SAAS,CAAEH,MAAOE,KAAKJ,MAAME,MAAQ,M,+BAK9C,OACI,yBAAKI,UAAU,QACX,yBAAKC,IAAKH,KAAKJ,MAAMG,SAAUK,IAAI,KACnC,yBAAKF,UAAU,oBACX,yBAAKA,UAAU,oBACVF,KAAKJ,MAAMC,aAGhB,yBAAKK,UAAU,sBACX,4BACIG,QAASL,KAAKM,SAASC,KAAKP,MAC5BQ,KAAK,SACLN,UAAU,0BAHd,KAOA,4BACIG,QAASL,KAAKS,SAASF,KAAKP,MAC5BQ,KAAK,SACLN,UAAU,yBAHd,KAQA,yBAAKA,UAAU,yBACVF,KAAKJ,MAAME,c,GA/ClBY,aC6CPC,E,2MA3CXjB,QAAU,SAACC,GACP,OAAO,2BAAIA,EAAMiB,O,EAGrBhB,MAAQ,CACJiB,WAAY,EACZC,aAAc,I,EAGlBC,OAAS,CACLC,SAAU,GACVC,WAAY,Q,wEAIZ,OACI,6BACI,6BACI,8CAEI,yBACIC,MAAOlB,KAAKe,OACZb,UAAU,2BAETF,KAAKmB,iBAIlB,yBAAKjB,UAAU,aACX,kBAAC,EAAD,CAASL,YAAa,UACtB,kBAAC,EAAD,CAASA,YAAa,WACtB,kBAAC,EAAD,CAASA,YAAa,e,oCAMvB,IACHgB,EAAeb,KAAKJ,MAApBiB,WACR,OAAsB,IAAfA,EAAmB,OAASA,M,GAxCrBH,aC0BPU,MAxBf,WACI,OACI,yBAAKlB,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKkB,IAAMnB,UAAU,WAAWE,IAAI,SACzC,mCACS,6CADT,wBAGA,uBACIF,UAAU,WACVoB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,QAQA,6BACA,kBAAC,EAAD,OAEJ,0BAAMtB,UAAU,eCZRuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.309ef243.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Product extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            productName: \"\",\r\n            count: 0,\r\n            imageUrl: \"https://picsum.photos/100\"\r\n        };\r\n    }\r\n\r\n    increase() {\r\n        this.setState({ count: this.state.count + 1 });\r\n    }\r\n\r\n    decrease() {\r\n        let { count } = this.state;\r\n        if (count !== 0) {\r\n            this.setState({ count: this.state.count - 1 });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <img src={this.state.imageUrl} alt=\"\" />\r\n                <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-text\">\r\n                        {this.state.productName}\r\n                    </div>\r\n\r\n                    <div className=\"input-group-append\">\r\n                        <button\r\n                            onClick={this.increase.bind(this)}\r\n                            type=\"button\"\r\n                            className=\"btn btn-success btn-sm\"\r\n                        >\r\n                            +\r\n                        </button>\r\n                        <button\r\n                            onClick={this.decrease.bind(this)}\r\n                            type=\"button\"\r\n                            className=\"btn btn-danger btn-sm\"\r\n                        >\r\n                            -\r\n                        </button>\r\n\r\n                        <div className=\"badge badge-secondary\">\r\n                            {this.state.count}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Product;\r\n","import React, { Component } from \"react\";\r\nimport Product from \"../components/product\";\r\n\r\nclass Counter extends Component {\r\n    Product = (props) => {\r\n        return <p>{props.text}</p>;\r\n    };\r\n\r\n    state = {\r\n        totalCount: 0,\r\n        productNames: []\r\n    };\r\n\r\n    styles = {\r\n        fontSize: 16,\r\n        fontWeight: \"bold\"\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div>\r\n                        Total articles\r\n                        <div\r\n                            style={this.styles}\r\n                            className=\"badge badge-primary m-2\"\r\n                        >\r\n                            {this.updateTotal()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <Product productName={\"Apple\"} />\r\n                    <Product productName={\"Banana\"} />\r\n                    <Product productName={\"Citrus\"} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateTotal() {\r\n        const { totalCount } = this.state;\r\n        return totalCount === 0 ? \"Zero\" : totalCount;\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Counter from \"./components/counter\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <p>\r\n                    Edit <code>src/App.tsx</code> and save to reload.\r\n                </p>\r\n                <a\r\n                    className=\"App-link\"\r\n                    href=\"https://reactjs.org\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    Test\r\n                </a>\r\n                <hr />\r\n                <Counter />\r\n            </header>\r\n            <body className=\"App-body\"></body>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}